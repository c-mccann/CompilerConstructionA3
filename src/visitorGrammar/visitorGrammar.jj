/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. visitorGrammar.jj */
/*@egen*/options {
               
                 
                           
}

PARSER_BEGIN(visitorGrammar)
package visitorGrammar;

public class visitorGrammar/*@bgen(jjtree)*/implements visitorGrammarTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTvisitorGrammarState jjtree = new JJTvisitorGrammarState();

/*@egen*/

  public static void main(String args[]) throws ParseException {
    visitorGrammar parser = new visitorGrammar(System.in);

    try{
      ASTS tree = parser.S();
      visitorGrammarVisitor v = new Visitor();
      tree.jjtAccept(v,null);
      System.out.println("Parsed Successfully");
      }
    catch(Exception e){
      System.out.println("ERROR");
      System.out.println(e.getMessage());
      e.printStackTrace();
      }
  }
}

PARSER_END(visitorGrammar)

SKIP :
{  " " |
   "\t" |
   "\n" |
   "\r"
}

TOKEN :
{
  < BEGIN : "begin" > |
  < END : "end" > |
  < INT : "int" > |
  < SEMIC : ";" > |
  < BOOL : "bool" > |
  < COMMA : "," > |
  < ASSIGN : ":=" > |
  < PLUS : "+" > |
  < MINUS : "-" > |
  < MULT : "*" > |
  < NUM : (< DIGIT >)+ > |
  < DIGIT : ["0" -"9"] > |
  < IF : "if" > |
  < THEN : "then" > |
  < ELSE : "else" > |
  < EQUAL : "=" > |
  < GTHAN : ">" > |
  < LTHAN : "<" > |
  < TRUE : "true" > |
  < FALSE : "false" > |
  < ID : (< ALPHA >)+ > |
  < ALPHA : ["a"-"z"] >
}

/** Root production. */
ASTS S()   :
{/*@bgen(jjtree) S */
 ASTS jjtn000 = new ASTS(JJTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) S */
  try {
/*@egen*/
  < BEGIN > DECLS() LINES() < END >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DECLS() :
{}
{
  DECL() DECLS2()
}

void DECLS2() :
{}
{
  (DECL())?
}

void DECL()      :
{/*@bgen(jjtree) DECL */
  ASTDECL jjtn000 = new ASTDECL(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DECL */
   try {
/*@egen*/
   X() VARS() < SEMIC >/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void X()   :
{/*@bgen(jjtree) X */
  ASTX jjtn000 = new ASTX(JJTX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) X */
  try {
/*@egen*/
  < INT >
  | < BOOL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VARS()       :
{/*@bgen(jjtree) VARS */
 ASTVARS jjtn000 = new ASTVARS(JJTVARS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) VARS */
  try {
/*@egen*/
  t = < ID > {jjtn000.value = t.image;} VARS2()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VARS2()        :
{/*@bgen(jjtree) VARS2 */
  ASTVARS2 jjtn000 = new ASTVARS2(JJTVARS2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VARS2 */
  try {
/*@egen*/
  (< COMMA > VARS())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void LINES() :
{}
{
  STMT() LINES2()
}

void LINES2()         :
{/*@bgen(jjtree) LINES2 */
 ASTLINES2 jjtn000 = new ASTLINES2(JJTLINES2);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LINES2 */
  try {
/*@egen*/
  (t = < SEMIC > {jjtn000.value = t.image;} LINES())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void STMT() :
{}
{
  ASSN()
  | IFSTMT()
}

void ASSN()       :
{/*@bgen(jjtree) ASSN */
 ASTASSN jjtn000 = new ASTASSN(JJTASSN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ASSN */
  try {
/*@egen*/
  t = < ID > {jjtn000.value = t.image;} < ASSIGN > Y()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Y()    :
{/*@bgen(jjtree) Y */
 ASTY jjtn000 = new ASTY(JJTY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Y */
  try {
/*@egen*/
  EXPR() Y2()
  | t = <TRUE>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image;}
  | t = <FALSE>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Y2() :
{}
{
  (Q() EXPR())?
}

void EXPR() :
{}
{
  TERM() EXPR2()
}

void EXPR2() :
{}
{
  (Z() TERM() EXPR2())?
}

void Z()   :
{/*@bgen(jjtree) Z */
 ASTZ jjtn000 = new ASTZ(JJTZ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Z */
  try {
/*@egen*/
  t = <PLUS>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.value = t.image;}
  | t = <MINUS>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TERM() :
{}
{
  FACTOR() TERM2()
}

void TERM2()        :
{/*@bgen(jjtree) TERM2 */
 ASTTERM2 jjtn000 = new ASTTERM2(JJTTERM2);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) TERM2 */
  try {
/*@egen*/
  (t = <MULT> {jjtn000.value = t.image;} FACTOR() TERM2())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FACTOR()         :
{/*@bgen(jjtree) FACTOR */
 ASTFACTOR jjtn000 = new ASTFACTOR(JJTFACTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FACTOR */
  try {
/*@egen*/
  t = <ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}
  | t =  <NUM>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IFSTMT()         :
{/*@bgen(jjtree) IFSTMT */
  ASTIFSTMT jjtn000 = new ASTIFSTMT(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IFSTMT */
  try {
/*@egen*/
  <IF> TEST() <THEN> ASSN() <ELSE> ASSN()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TEST()      :
{/*@bgen(jjtree) TEST */
 ASTTEST jjtn000 = new ASTTEST(JJTTEST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) TEST */
  try {
/*@egen*/
  EXPR() TEST2()
  | t = < TRUE >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}
  | t = < FALSE >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TEST2() :
{}
{
  Q() EXPR()
}

void Q()    :
{/*@bgen(jjtree) Q */
 ASTQ jjtn000 = new ASTQ(JJTQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Q */
  try {
/*@egen*/
  t = <EQUAL>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image;}
  | t = <GTHAN>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = t.image;}
  | t = <LTHAN>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}