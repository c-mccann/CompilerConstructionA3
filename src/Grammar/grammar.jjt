options {
  STATIC = true;

}

PARSER_BEGIN(grammar)


public class grammar {


  public static void main(String args[]) throws ParseException {
    grammar parser = new grammar(System.in);
    try{
      parser.Input();
      System.out.println("Parsed Successfully");
      }
    catch(Exception e){
      System.out.println("ERROR");
      System.out.println(e.getMessage());
      e.printStackTrace();
      }


  }

}

PARSER_END(grammar)

SKIP :
{  " " |
   "\t" |
   "\n" |
   "\r"
}


TOKEN :
{
  < BEGIN : "begin" > |
  < END : "end" > |
  < INT : "int" > |
  < SEMIC : ";" > |
  < BOOL : "bool" > |
  < COMMA : "," > |
  < ASSIGN : ":=" > |
  < PLUS : "+" > |
  < MINUS : "-" > |
  < MULT : "*" > |
  < NUM : (< DIGIT >)+ > |
  < #DIGIT : ["0" -"9"] > |
  < IF : "if" > |
  < THEN : "then" > |
  < ELSE : "else" > |
  < EQUAL : "=" > |
  < GTHAN : ">" > |
  < LTHAN : "<" > |
  < TRUE : "true" > |
  < FALSE : "false" > |
  < ID : (< ALPHA >)+ > |
  < #ALPHA : ["a"-"z"] >
}

/** Root production. */
void Input() :
{}
{
  S()
}

void S() :
{}
{
  < BEGIN > DECLS() LINES() < END >
}

void DECLS() :
{}
{
  DECL() DECLS2()
}

void DECLS2() :
{}
{
  (DECL())?
}

void DECL() :
{}
{
   X() VARS() < SEMIC >
}

void X() :
{}
{
  < INT > | < BOOL >
}

void VARS() :
{}
{
  < ID > VARS2()
}

void VARS2() :
{}
{
  (< COMMA > VARS())?
}


void LINES() :
{}
{
  STMT() LINES2()
}

void LINES2() :
{}
{
  (< SEMIC > LINES())?
}

void STMT() :
{}
{
  ASSN() | IFSTMT()
}

void ASSN() :
{}
{
  < ID > < ASSIGN > Y()
}

void Y() :
{}
{
EXPR() Y2() | <TRUE> | <FALSE>
}

void Y2() :
{}
{
  (Q() EXPR())?
}

void EXPR() :
{}
{
  TERM() EXPR2()
}

void EXPR2() :
{}
{
  (Z() TERM() EXPR2())?
}

void Z() :
{}
{
  <PLUS> | <MINUS>
}

void TERM() :
{}
{
  FACTOR() TERM2()
}

void TERM2() :
{}
{
  (<MULT> FACTOR() TERM2())?
}

void FACTOR() :
{}
{
  <ID> | <NUM>
}

void IFSTMT() :
{}
{
  <IF> TEST() <THEN> ASSN() <ELSE> ASSN()
}

void TEST() :
{}
{
  EXPR() TEST2() | < TRUE > | < FALSE >
}

void TEST2() :
{}
{
  Q() EXPR()
}

void Q() :
{}
{
  <EQUAL> | <GTHAN> | <LTHAN>
}